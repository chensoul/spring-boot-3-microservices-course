spring:
  application:
    name: order-service
  datasource:
    url: jdbc:mysql://localhost:3306/microservices
    username: root
    password: pass
  jpa:
    hibernate:
      ddl-auto: create
  kafka:
    bootstrap-servers: localhost:9092
    template:
      default-topic: order-placed
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema:
          registry:
            url: http://127.0.0.1:8085
server:
  port: 8081

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
management.endpoint.health.probes.enabled: true
management.metrics.tags.application: ${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests: true
management.observations.key-values.application: ${spring.application.name}

management.tracing.sampling.probability: 1.0
management.zipkin.tracing.endpoint: http://localhost:9411/api/v2/spans

loki.url: http://localhost:3100/loki/api/v1/push

resilience4j:
  circuitbreaker:
    instances:
      inventory:
        registerHealthIndicator: true
        event-consumer-buffer-size: 10
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        minimum-number-of-calls: 5
  timelimiter:
    instances:
      inventory:
        timeout-duration: 3s
  retry:
    instances:
      inventory:
        max-attempts: 3
        wait-duration: 5s

inventory:
  service:
    url: http://localhost:8082
